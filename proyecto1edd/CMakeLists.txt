cmake_minimum_required(VERSION 2.6)

project (proyecto1edd CXX)

set(PROYECTO1EDD_HEADERS proyecto1EDD.h NodoUsuario.h)

set(PROJECT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)
set(PROYECTO1EDD_CODEGEN_DIR "${PROJECT_BINARY_DIR}/codegen")

PREPEND(PROYECTO1EDD_HEADERS_PATHS ${PROJECT_SOURCE_DIR} ${PROYECTO1EDD_HEADERS})

CODEGEN_FILES(PROYECTO1EDD_CODEGEN_SOURCES ${PROYECTO1EDD_CODEGEN_DIR} ${PROYECTO1EDD_HEADERS})

add_custom_command(OUTPUT ${PROYECTO1EDD_CODEGEN_SOURCES}
    COMMAND ${NGREST_BIN_PATH}ngrestcg -i "${PROJECT_SOURCE_DIR}" -o ${PROYECTO1EDD_CODEGEN_DIR} -t service ${PROYECTO1EDD_HEADERS}
    DEPENDS ${PROYECTO1EDD_HEADERS_PATHS}
)

file(GLOB PROYECTO1EDD_SOURCES ${PROJECT_SOURCE_DIR}/*.cpp)

list(APPEND PROYECTO1EDD_SOURCES ${PROYECTO1EDD_CODEGEN_SOURCES})

include_directories(${PROJECT_SOURCE_DIR} $ENV{NGREST_EXT_INCLUDES})

add_library(proyecto1edd MODULE ${PROYECTO1EDD_SOURCES})

set_target_properties(proyecto1edd PROPERTIES PREFIX "")
set_target_properties(proyecto1edd PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SERVICES_DIR}"
)

target_link_libraries(proyecto1edd ngrestutils ngrestcommon ngrestjson ngrestengine $ENV{NGREST_EXT_LIBS})
